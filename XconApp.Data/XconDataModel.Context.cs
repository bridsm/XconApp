//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XconApp.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class XCON_GCEntities : DbContext
    {
        public XCON_GCEntities()
            : base("name=XCON_GCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GC_ORDR> GC_ORDR { get; set; }
        public virtual DbSet<GC_OREC> GC_OREC { get; set; }
        public virtual DbSet<GC_USER> GC_USER { get; set; }
        public virtual DbSet<GC_OCRD> GC_OCRD { get; set; }
        public virtual DbSet<GC_OQUT> GC_OQUT { get; set; }
        public virtual DbSet<GC_QUT1> GC_QUT1 { get; set; }
        public virtual DbSet<GC_RDR1> GC_RDR1 { get; set; }
        public virtual DbSet<GC_RDR2> GC_RDR2 { get; set; }
    
        public virtual ObjectResult<Get_XCONQuotation_Result> Get_XCONQuotation(Nullable<System.DateTime> dueDateFrom, Nullable<System.DateTime> dueDateTo, Nullable<int> docnumFrom, Nullable<int> docnumTo)
        {
            var dueDateFromParameter = dueDateFrom.HasValue ?
                new ObjectParameter("DueDateFrom", dueDateFrom) :
                new ObjectParameter("DueDateFrom", typeof(System.DateTime));
    
            var dueDateToParameter = dueDateTo.HasValue ?
                new ObjectParameter("DueDateTo", dueDateTo) :
                new ObjectParameter("DueDateTo", typeof(System.DateTime));
    
            var docnumFromParameter = docnumFrom.HasValue ?
                new ObjectParameter("DocnumFrom", docnumFrom) :
                new ObjectParameter("DocnumFrom", typeof(int));
    
            var docnumToParameter = docnumTo.HasValue ?
                new ObjectParameter("DocnumTo", docnumTo) :
                new ObjectParameter("DocnumTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_XCONQuotation_Result>("Get_XCONQuotation", dueDateFromParameter, dueDateToParameter, docnumFromParameter, docnumToParameter);
        }
    
        public virtual int POST_ORDR(Nullable<System.DateTime> docDate, Nullable<System.DateTime> docDueDate, string cardCode, string cardName, string address, string numAtCard, Nullable<decimal> vatSum, Nullable<decimal> docTotal, string doc_Approve, Nullable<System.DateTime> doc_Date, Nullable<int> doc_BaseRef, string doc_Status, string doc_Remark, string doc_AppUser, Nullable<System.DateTime> doc_AppDate, string docCur, Nullable<decimal> docRate, string projectCode, string comment)
        {
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var docDueDateParameter = docDueDate.HasValue ?
                new ObjectParameter("DocDueDate", docDueDate) :
                new ObjectParameter("DocDueDate", typeof(System.DateTime));
    
            var cardCodeParameter = cardCode != null ?
                new ObjectParameter("CardCode", cardCode) :
                new ObjectParameter("CardCode", typeof(string));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var numAtCardParameter = numAtCard != null ?
                new ObjectParameter("NumAtCard", numAtCard) :
                new ObjectParameter("NumAtCard", typeof(string));
    
            var vatSumParameter = vatSum.HasValue ?
                new ObjectParameter("VatSum", vatSum) :
                new ObjectParameter("VatSum", typeof(decimal));
    
            var docTotalParameter = docTotal.HasValue ?
                new ObjectParameter("DocTotal", docTotal) :
                new ObjectParameter("DocTotal", typeof(decimal));
    
            var doc_ApproveParameter = doc_Approve != null ?
                new ObjectParameter("Doc_Approve", doc_Approve) :
                new ObjectParameter("Doc_Approve", typeof(string));
    
            var doc_DateParameter = doc_Date.HasValue ?
                new ObjectParameter("Doc_Date", doc_Date) :
                new ObjectParameter("Doc_Date", typeof(System.DateTime));
    
            var doc_BaseRefParameter = doc_BaseRef.HasValue ?
                new ObjectParameter("Doc_BaseRef", doc_BaseRef) :
                new ObjectParameter("Doc_BaseRef", typeof(int));
    
            var doc_StatusParameter = doc_Status != null ?
                new ObjectParameter("Doc_Status", doc_Status) :
                new ObjectParameter("Doc_Status", typeof(string));
    
            var doc_RemarkParameter = doc_Remark != null ?
                new ObjectParameter("Doc_Remark", doc_Remark) :
                new ObjectParameter("Doc_Remark", typeof(string));
    
            var doc_AppUserParameter = doc_AppUser != null ?
                new ObjectParameter("Doc_AppUser", doc_AppUser) :
                new ObjectParameter("Doc_AppUser", typeof(string));
    
            var doc_AppDateParameter = doc_AppDate.HasValue ?
                new ObjectParameter("Doc_AppDate", doc_AppDate) :
                new ObjectParameter("Doc_AppDate", typeof(System.DateTime));
    
            var docCurParameter = docCur != null ?
                new ObjectParameter("DocCur", docCur) :
                new ObjectParameter("DocCur", typeof(string));
    
            var docRateParameter = docRate.HasValue ?
                new ObjectParameter("DocRate", docRate) :
                new ObjectParameter("DocRate", typeof(decimal));
    
            var projectCodeParameter = projectCode != null ?
                new ObjectParameter("ProjectCode", projectCode) :
                new ObjectParameter("ProjectCode", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("POST_ORDR", docDateParameter, docDueDateParameter, cardCodeParameter, cardNameParameter, addressParameter, numAtCardParameter, vatSumParameter, docTotalParameter, doc_ApproveParameter, doc_DateParameter, doc_BaseRefParameter, doc_StatusParameter, doc_RemarkParameter, doc_AppUserParameter, doc_AppDateParameter, docCurParameter, docRateParameter, projectCodeParameter, commentParameter);
        }
    
        public virtual int POST_PAYMENT(Nullable<int> lineNum, string docStatus, Nullable<System.DateTime> docDate, string cardCode, string cardName, string typePay, string bank, Nullable<decimal> amount, string project, string u_MainProject, string attachFile)
        {
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var docStatusParameter = docStatus != null ?
                new ObjectParameter("DocStatus", docStatus) :
                new ObjectParameter("DocStatus", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var cardCodeParameter = cardCode != null ?
                new ObjectParameter("CardCode", cardCode) :
                new ObjectParameter("CardCode", typeof(string));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var typePayParameter = typePay != null ?
                new ObjectParameter("TypePay", typePay) :
                new ObjectParameter("TypePay", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var u_MainProjectParameter = u_MainProject != null ?
                new ObjectParameter("U_MainProject", u_MainProject) :
                new ObjectParameter("U_MainProject", typeof(string));
    
            var attachFileParameter = attachFile != null ?
                new ObjectParameter("AttachFile", attachFile) :
                new ObjectParameter("AttachFile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("POST_PAYMENT", lineNumParameter, docStatusParameter, docDateParameter, cardCodeParameter, cardNameParameter, typePayParameter, bankParameter, amountParameter, projectParameter, u_MainProjectParameter, attachFileParameter);
        }
    
        public virtual int POST_RDR1(Nullable<int> docNum, string itemCode, string dscription, Nullable<decimal> quantity, Nullable<decimal> price, string currency, Nullable<decimal> rate, string whsCode, Nullable<decimal> priceBefDi, Nullable<System.DateTime> docDate, string ocrCode, string project, Nullable<decimal> vatPrcnt, string vatGroup, Nullable<decimal> priceAfVAT, Nullable<decimal> vatSum, string taxCode, string taxType, string freeTxt, string unitMsr, string uomCode, string fromWhsCod, string doc_LineDesc, string doc_SizeColor, string doc_Status, string doc_Remark)
        {
            var docNumParameter = docNum.HasValue ?
                new ObjectParameter("DocNum", docNum) :
                new ObjectParameter("DocNum", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var dscriptionParameter = dscription != null ?
                new ObjectParameter("Dscription", dscription) :
                new ObjectParameter("Dscription", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var whsCodeParameter = whsCode != null ?
                new ObjectParameter("WhsCode", whsCode) :
                new ObjectParameter("WhsCode", typeof(string));
    
            var priceBefDiParameter = priceBefDi.HasValue ?
                new ObjectParameter("PriceBefDi", priceBefDi) :
                new ObjectParameter("PriceBefDi", typeof(decimal));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var ocrCodeParameter = ocrCode != null ?
                new ObjectParameter("OcrCode", ocrCode) :
                new ObjectParameter("OcrCode", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var vatPrcntParameter = vatPrcnt.HasValue ?
                new ObjectParameter("VatPrcnt", vatPrcnt) :
                new ObjectParameter("VatPrcnt", typeof(decimal));
    
            var vatGroupParameter = vatGroup != null ?
                new ObjectParameter("VatGroup", vatGroup) :
                new ObjectParameter("VatGroup", typeof(string));
    
            var priceAfVATParameter = priceAfVAT.HasValue ?
                new ObjectParameter("PriceAfVAT", priceAfVAT) :
                new ObjectParameter("PriceAfVAT", typeof(decimal));
    
            var vatSumParameter = vatSum.HasValue ?
                new ObjectParameter("VatSum", vatSum) :
                new ObjectParameter("VatSum", typeof(decimal));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var taxTypeParameter = taxType != null ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(string));
    
            var freeTxtParameter = freeTxt != null ?
                new ObjectParameter("FreeTxt", freeTxt) :
                new ObjectParameter("FreeTxt", typeof(string));
    
            var unitMsrParameter = unitMsr != null ?
                new ObjectParameter("unitMsr", unitMsr) :
                new ObjectParameter("unitMsr", typeof(string));
    
            var uomCodeParameter = uomCode != null ?
                new ObjectParameter("UomCode", uomCode) :
                new ObjectParameter("UomCode", typeof(string));
    
            var fromWhsCodParameter = fromWhsCod != null ?
                new ObjectParameter("FromWhsCod", fromWhsCod) :
                new ObjectParameter("FromWhsCod", typeof(string));
    
            var doc_LineDescParameter = doc_LineDesc != null ?
                new ObjectParameter("Doc_LineDesc", doc_LineDesc) :
                new ObjectParameter("Doc_LineDesc", typeof(string));
    
            var doc_SizeColorParameter = doc_SizeColor != null ?
                new ObjectParameter("Doc_SizeColor", doc_SizeColor) :
                new ObjectParameter("Doc_SizeColor", typeof(string));
    
            var doc_StatusParameter = doc_Status != null ?
                new ObjectParameter("Doc_Status", doc_Status) :
                new ObjectParameter("Doc_Status", typeof(string));
    
            var doc_RemarkParameter = doc_Remark != null ?
                new ObjectParameter("Doc_Remark", doc_Remark) :
                new ObjectParameter("Doc_Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("POST_RDR1", docNumParameter, itemCodeParameter, dscriptionParameter, quantityParameter, priceParameter, currencyParameter, rateParameter, whsCodeParameter, priceBefDiParameter, docDateParameter, ocrCodeParameter, projectParameter, vatPrcntParameter, vatGroupParameter, priceAfVATParameter, vatSumParameter, taxCodeParameter, taxTypeParameter, freeTxtParameter, unitMsrParameter, uomCodeParameter, fromWhsCodParameter, doc_LineDescParameter, doc_SizeColorParameter, doc_StatusParameter, doc_RemarkParameter);
        }
    
        public virtual int POST_RDR2(Nullable<int> docNum, Nullable<int> lineNum, string doc_Size, string doc_Color, Nullable<decimal> quantity, string doc_Label, string doc_Remark1, string doc_Remark2)
        {
            var docNumParameter = docNum.HasValue ?
                new ObjectParameter("DocNum", docNum) :
                new ObjectParameter("DocNum", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var doc_SizeParameter = doc_Size != null ?
                new ObjectParameter("Doc_Size", doc_Size) :
                new ObjectParameter("Doc_Size", typeof(string));
    
            var doc_ColorParameter = doc_Color != null ?
                new ObjectParameter("Doc_Color", doc_Color) :
                new ObjectParameter("Doc_Color", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var doc_LabelParameter = doc_Label != null ?
                new ObjectParameter("Doc_Label", doc_Label) :
                new ObjectParameter("Doc_Label", typeof(string));
    
            var doc_Remark1Parameter = doc_Remark1 != null ?
                new ObjectParameter("Doc_Remark1", doc_Remark1) :
                new ObjectParameter("Doc_Remark1", typeof(string));
    
            var doc_Remark2Parameter = doc_Remark2 != null ?
                new ObjectParameter("Doc_Remark2", doc_Remark2) :
                new ObjectParameter("Doc_Remark2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("POST_RDR2", docNumParameter, lineNumParameter, doc_SizeParameter, doc_ColorParameter, quantityParameter, doc_LabelParameter, doc_Remark1Parameter, doc_Remark2Parameter);
        }
    
        public virtual int PUT_OQUT(Nullable<System.DateTime> u_EarlyFromDate, Nullable<System.DateTime> u_EarlyToDate, Nullable<System.DateTime> u_StandardFromDate, Nullable<System.DateTime> u_StandardToDate, Nullable<System.DateTime> u_OnSiteFromDate, Nullable<System.DateTime> u_OnSiteToDate, Nullable<decimal> u_EarlyDisc, Nullable<decimal> u_StandardDisc, Nullable<decimal> u_OnSiteDisc, Nullable<int> docEntry)
        {
            var u_EarlyFromDateParameter = u_EarlyFromDate.HasValue ?
                new ObjectParameter("U_EarlyFromDate", u_EarlyFromDate) :
                new ObjectParameter("U_EarlyFromDate", typeof(System.DateTime));
    
            var u_EarlyToDateParameter = u_EarlyToDate.HasValue ?
                new ObjectParameter("U_EarlyToDate", u_EarlyToDate) :
                new ObjectParameter("U_EarlyToDate", typeof(System.DateTime));
    
            var u_StandardFromDateParameter = u_StandardFromDate.HasValue ?
                new ObjectParameter("U_StandardFromDate", u_StandardFromDate) :
                new ObjectParameter("U_StandardFromDate", typeof(System.DateTime));
    
            var u_StandardToDateParameter = u_StandardToDate.HasValue ?
                new ObjectParameter("U_StandardToDate", u_StandardToDate) :
                new ObjectParameter("U_StandardToDate", typeof(System.DateTime));
    
            var u_OnSiteFromDateParameter = u_OnSiteFromDate.HasValue ?
                new ObjectParameter("U_OnSiteFromDate", u_OnSiteFromDate) :
                new ObjectParameter("U_OnSiteFromDate", typeof(System.DateTime));
    
            var u_OnSiteToDateParameter = u_OnSiteToDate.HasValue ?
                new ObjectParameter("U_OnSiteToDate", u_OnSiteToDate) :
                new ObjectParameter("U_OnSiteToDate", typeof(System.DateTime));
    
            var u_EarlyDiscParameter = u_EarlyDisc.HasValue ?
                new ObjectParameter("U_EarlyDisc", u_EarlyDisc) :
                new ObjectParameter("U_EarlyDisc", typeof(decimal));
    
            var u_StandardDiscParameter = u_StandardDisc.HasValue ?
                new ObjectParameter("U_StandardDisc", u_StandardDisc) :
                new ObjectParameter("U_StandardDisc", typeof(decimal));
    
            var u_OnSiteDiscParameter = u_OnSiteDisc.HasValue ?
                new ObjectParameter("U_OnSiteDisc", u_OnSiteDisc) :
                new ObjectParameter("U_OnSiteDisc", typeof(decimal));
    
            var docEntryParameter = docEntry.HasValue ?
                new ObjectParameter("DocEntry", docEntry) :
                new ObjectParameter("DocEntry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUT_OQUT", u_EarlyFromDateParameter, u_EarlyToDateParameter, u_StandardFromDateParameter, u_StandardToDateParameter, u_OnSiteFromDateParameter, u_OnSiteToDateParameter, u_EarlyDiscParameter, u_StandardDiscParameter, u_OnSiteDiscParameter, docEntryParameter);
        }
    
        public virtual int PUT_PAYMENT(Nullable<int> lineNum, string docStatus, Nullable<System.DateTime> docDate, string cardCode, string cardName, string typePay, string bank, Nullable<decimal> amount, string project, string u_MainProject, string attachFile, Nullable<int> docNum)
        {
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var docStatusParameter = docStatus != null ?
                new ObjectParameter("DocStatus", docStatus) :
                new ObjectParameter("DocStatus", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var cardCodeParameter = cardCode != null ?
                new ObjectParameter("CardCode", cardCode) :
                new ObjectParameter("CardCode", typeof(string));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var typePayParameter = typePay != null ?
                new ObjectParameter("TypePay", typePay) :
                new ObjectParameter("TypePay", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var u_MainProjectParameter = u_MainProject != null ?
                new ObjectParameter("U_MainProject", u_MainProject) :
                new ObjectParameter("U_MainProject", typeof(string));
    
            var attachFileParameter = attachFile != null ?
                new ObjectParameter("AttachFile", attachFile) :
                new ObjectParameter("AttachFile", typeof(string));
    
            var docNumParameter = docNum.HasValue ?
                new ObjectParameter("DocNum", docNum) :
                new ObjectParameter("DocNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUT_PAYMENT", lineNumParameter, docStatusParameter, docDateParameter, cardCodeParameter, cardNameParameter, typePayParameter, bankParameter, amountParameter, projectParameter, u_MainProjectParameter, attachFileParameter, docNumParameter);
        }
    
        public virtual int PUT_QUT1(Nullable<decimal> u_EarlyPrice, Nullable<decimal> u_StandardPrice, Nullable<decimal> u_OnSitePrice, string u_Size, string u_Color, Nullable<int> docEntry, Nullable<int> lineNum)
        {
            var u_EarlyPriceParameter = u_EarlyPrice.HasValue ?
                new ObjectParameter("U_EarlyPrice", u_EarlyPrice) :
                new ObjectParameter("U_EarlyPrice", typeof(decimal));
    
            var u_StandardPriceParameter = u_StandardPrice.HasValue ?
                new ObjectParameter("U_StandardPrice", u_StandardPrice) :
                new ObjectParameter("U_StandardPrice", typeof(decimal));
    
            var u_OnSitePriceParameter = u_OnSitePrice.HasValue ?
                new ObjectParameter("U_OnSitePrice", u_OnSitePrice) :
                new ObjectParameter("U_OnSitePrice", typeof(decimal));
    
            var u_SizeParameter = u_Size != null ?
                new ObjectParameter("U_Size", u_Size) :
                new ObjectParameter("U_Size", typeof(string));
    
            var u_ColorParameter = u_Color != null ?
                new ObjectParameter("U_Color", u_Color) :
                new ObjectParameter("U_Color", typeof(string));
    
            var docEntryParameter = docEntry.HasValue ?
                new ObjectParameter("DocEntry", docEntry) :
                new ObjectParameter("DocEntry", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PUT_QUT1", u_EarlyPriceParameter, u_StandardPriceParameter, u_OnSitePriceParameter, u_SizeParameter, u_ColorParameter, docEntryParameter, lineNumParameter);
        }
    
        public virtual ObjectResult<UPSERT_OCRD_Result> UPSERT_OCRD(string codeFrom, string codeTo)
        {
            var codeFromParameter = codeFrom != null ?
                new ObjectParameter("CodeFrom", codeFrom) :
                new ObjectParameter("CodeFrom", typeof(string));
    
            var codeToParameter = codeTo != null ?
                new ObjectParameter("CodeTo", codeTo) :
                new ObjectParameter("CodeTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UPSERT_OCRD_Result>("UPSERT_OCRD", codeFromParameter, codeToParameter);
        }
    
        public virtual ObjectResult<UPSERT_OQUT_Result> UPSERT_OQUT(Nullable<System.DateTime> dueDateFrom, Nullable<System.DateTime> dueDateTo, Nullable<int> docnumFrom, Nullable<int> docnumTo)
        {
            var dueDateFromParameter = dueDateFrom.HasValue ?
                new ObjectParameter("DueDateFrom", dueDateFrom) :
                new ObjectParameter("DueDateFrom", typeof(System.DateTime));
    
            var dueDateToParameter = dueDateTo.HasValue ?
                new ObjectParameter("DueDateTo", dueDateTo) :
                new ObjectParameter("DueDateTo", typeof(System.DateTime));
    
            var docnumFromParameter = docnumFrom.HasValue ?
                new ObjectParameter("DocnumFrom", docnumFrom) :
                new ObjectParameter("DocnumFrom", typeof(int));
    
            var docnumToParameter = docnumTo.HasValue ?
                new ObjectParameter("DocnumTo", docnumTo) :
                new ObjectParameter("DocnumTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UPSERT_OQUT_Result>("UPSERT_OQUT", dueDateFromParameter, dueDateToParameter, docnumFromParameter, docnumToParameter);
        }
    
        public virtual ObjectResult<UPSERT_QUT1_Result> UPSERT_QUT1(Nullable<System.DateTime> dueDateFrom, Nullable<System.DateTime> dueDateTo, Nullable<int> docnumFrom, Nullable<int> docnumTo)
        {
            var dueDateFromParameter = dueDateFrom.HasValue ?
                new ObjectParameter("DueDateFrom", dueDateFrom) :
                new ObjectParameter("DueDateFrom", typeof(System.DateTime));
    
            var dueDateToParameter = dueDateTo.HasValue ?
                new ObjectParameter("DueDateTo", dueDateTo) :
                new ObjectParameter("DueDateTo", typeof(System.DateTime));
    
            var docnumFromParameter = docnumFrom.HasValue ?
                new ObjectParameter("DocnumFrom", docnumFrom) :
                new ObjectParameter("DocnumFrom", typeof(int));
    
            var docnumToParameter = docnumTo.HasValue ?
                new ObjectParameter("DocnumTo", docnumTo) :
                new ObjectParameter("DocnumTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UPSERT_QUT1_Result>("UPSERT_QUT1", dueDateFromParameter, dueDateToParameter, docnumFromParameter, docnumToParameter);
        }
    }
}
